# coding: utf-8

"""
    Solana API

    Moralis Solana API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_sol_api import schemas  # noqa: F401


class SPLTokenPrice(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "usdPrice",
            "exchangeAddress",
            "nativePrice",
            "exchangeName",
        }
        
        class properties:
        
            @staticmethod
            def nativePrice() -> typing.Type['SPLNativePrice']:
                return SPLNativePrice
            usdPrice = schemas.NumberSchema
            exchangeAddress = schemas.StrSchema
            exchangeName = schemas.StrSchema
            __annotations__ = {
                "nativePrice": nativePrice,
                "usdPrice": usdPrice,
                "exchangeAddress": exchangeAddress,
                "exchangeName": exchangeName,
            }
    
    usdPrice: MetaOapg.properties.usdPrice
    exchangeAddress: MetaOapg.properties.exchangeAddress
    nativePrice: 'SPLNativePrice'
    exchangeName: MetaOapg.properties.exchangeName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nativePrice"]) -> 'SPLNativePrice': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usdPrice"]) -> MetaOapg.properties.usdPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchangeAddress"]) -> MetaOapg.properties.exchangeAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchangeName"]) -> MetaOapg.properties.exchangeName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["nativePrice", "usdPrice", "exchangeAddress", "exchangeName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nativePrice"]) -> 'SPLNativePrice': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usdPrice"]) -> MetaOapg.properties.usdPrice: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchangeAddress"]) -> MetaOapg.properties.exchangeAddress: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchangeName"]) -> MetaOapg.properties.exchangeName: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["nativePrice", "usdPrice", "exchangeAddress", "exchangeName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        usdPrice: typing.Union[MetaOapg.properties.usdPrice, decimal.Decimal, int, float, ],
        exchangeAddress: typing.Union[MetaOapg.properties.exchangeAddress, str, ],
        nativePrice: 'SPLNativePrice',
        exchangeName: typing.Union[MetaOapg.properties.exchangeName, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SPLTokenPrice':
        return super().__new__(
            cls,
            *_args,
            usdPrice=usdPrice,
            exchangeAddress=exchangeAddress,
            nativePrice=nativePrice,
            exchangeName=exchangeName,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_sol_api.model.spl_native_price import SPLNativePrice
