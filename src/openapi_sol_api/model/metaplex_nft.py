# coding: utf-8

"""
    Solana API

    Moralis Solana API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_sol_api import schemas  # noqa: F401


class MetaplexNFT(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "isMutable",
            "updateAuthority",
            "primarySaleHappened",
            "sellerFeeBasisPoints",
            "metadataUri",
            "masterEdition",
        }
        
        class properties:
            metadataUri = schemas.StrSchema
            masterEdition = schemas.BoolSchema
            isMutable = schemas.BoolSchema
            primarySaleHappened = schemas.BoolSchema
            sellerFeeBasisPoints = schemas.NumberSchema
            updateAuthority = schemas.StrSchema
            __annotations__ = {
                "metadataUri": metadataUri,
                "masterEdition": masterEdition,
                "isMutable": isMutable,
                "primarySaleHappened": primarySaleHappened,
                "sellerFeeBasisPoints": sellerFeeBasisPoints,
                "updateAuthority": updateAuthority,
            }
    
    isMutable: MetaOapg.properties.isMutable
    updateAuthority: MetaOapg.properties.updateAuthority
    primarySaleHappened: MetaOapg.properties.primarySaleHappened
    sellerFeeBasisPoints: MetaOapg.properties.sellerFeeBasisPoints
    metadataUri: MetaOapg.properties.metadataUri
    masterEdition: MetaOapg.properties.masterEdition
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataUri"]) -> MetaOapg.properties.metadataUri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["masterEdition"]) -> MetaOapg.properties.masterEdition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isMutable"]) -> MetaOapg.properties.isMutable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primarySaleHappened"]) -> MetaOapg.properties.primarySaleHappened: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sellerFeeBasisPoints"]) -> MetaOapg.properties.sellerFeeBasisPoints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateAuthority"]) -> MetaOapg.properties.updateAuthority: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["metadataUri", "masterEdition", "isMutable", "primarySaleHappened", "sellerFeeBasisPoints", "updateAuthority", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataUri"]) -> MetaOapg.properties.metadataUri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["masterEdition"]) -> MetaOapg.properties.masterEdition: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isMutable"]) -> MetaOapg.properties.isMutable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primarySaleHappened"]) -> MetaOapg.properties.primarySaleHappened: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sellerFeeBasisPoints"]) -> MetaOapg.properties.sellerFeeBasisPoints: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateAuthority"]) -> MetaOapg.properties.updateAuthority: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["metadataUri", "masterEdition", "isMutable", "primarySaleHappened", "sellerFeeBasisPoints", "updateAuthority", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        isMutable: typing.Union[MetaOapg.properties.isMutable, bool, ],
        updateAuthority: typing.Union[MetaOapg.properties.updateAuthority, str, ],
        primarySaleHappened: typing.Union[MetaOapg.properties.primarySaleHappened, bool, ],
        sellerFeeBasisPoints: typing.Union[MetaOapg.properties.sellerFeeBasisPoints, decimal.Decimal, int, float, ],
        metadataUri: typing.Union[MetaOapg.properties.metadataUri, str, ],
        masterEdition: typing.Union[MetaOapg.properties.masterEdition, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MetaplexNFT':
        return super().__new__(
            cls,
            *_args,
            isMutable=isMutable,
            updateAuthority=updateAuthority,
            primarySaleHappened=primarySaleHappened,
            sellerFeeBasisPoints=sellerFeeBasisPoints,
            metadataUri=metadataUri,
            masterEdition=masterEdition,
            _configuration=_configuration,
            **kwargs,
        )
