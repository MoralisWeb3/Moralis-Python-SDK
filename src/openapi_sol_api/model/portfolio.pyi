# coding: utf-8

"""
    Solana API

    Moralis Solana API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_sol_api import schemas  # noqa: F401


class Portfolio(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "nfts",
            "nativeBalance",
            "tokens",
        }
        
        class properties:
        
            @staticmethod
            def nativeBalance() -> typing.Type['NativeBalance']:
                return NativeBalance
            
            
            class nfts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SPLNFT']:
                        return SPLNFT
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SPLNFT'], typing.List['SPLNFT']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nfts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SPLNFT':
                    return super().__getitem__(i)
            
            
            class tokens(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SPLTokenBalance']:
                        return SPLTokenBalance
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SPLTokenBalance'], typing.List['SPLTokenBalance']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tokens':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SPLTokenBalance':
                    return super().__getitem__(i)
            __annotations__ = {
                "nativeBalance": nativeBalance,
                "nfts": nfts,
                "tokens": tokens,
            }
    
    nfts: MetaOapg.properties.nfts
    nativeBalance: 'NativeBalance'
    tokens: MetaOapg.properties.tokens
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nativeBalance"]) -> 'NativeBalance': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nfts"]) -> MetaOapg.properties.nfts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokens"]) -> MetaOapg.properties.tokens: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["nativeBalance", "nfts", "tokens", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nativeBalance"]) -> 'NativeBalance': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nfts"]) -> MetaOapg.properties.nfts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokens"]) -> MetaOapg.properties.tokens: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["nativeBalance", "nfts", "tokens", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        nfts: typing.Union[MetaOapg.properties.nfts, list, tuple, ],
        nativeBalance: 'NativeBalance',
        tokens: typing.Union[MetaOapg.properties.tokens, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Portfolio':
        return super().__new__(
            cls,
            *_args,
            nfts=nfts,
            nativeBalance=nativeBalance,
            tokens=tokens,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_sol_api.model.native_balance import NativeBalance
from openapi_sol_api.model.spl_token_balance import SPLTokenBalance
from openapi_sol_api.model.splnft import SPLNFT
