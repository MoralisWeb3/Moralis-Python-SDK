# coding: utf-8

"""
    Streams Api

    API that provides access to Moralis Streams  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_streams import schemas  # noqa: F401


class AbiItem(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The abi to parse the log object of the contract
    """


    class MetaOapg:
        required = {
            "type",
        }
        
        class properties:
            type = schemas.StrSchema
            anonymous = schemas.BoolSchema
            constant = schemas.BoolSchema
            
            
            class inputs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AbiInput']:
                        return AbiInput
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AbiInput'], typing.List['AbiInput']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inputs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AbiInput':
                    return super().__getitem__(i)
            name = schemas.StrSchema
            
            
            class outputs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AbiOutput']:
                        return AbiOutput
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AbiOutput'], typing.List['AbiOutput']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'outputs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AbiOutput':
                    return super().__getitem__(i)
            payable = schemas.BoolSchema
            stateMutability = schemas.StrSchema
            gas = schemas.Float64Schema
            __annotations__ = {
                "type": type,
                "anonymous": anonymous,
                "constant": constant,
                "inputs": inputs,
                "name": name,
                "outputs": outputs,
                "payable": payable,
                "stateMutability": stateMutability,
                "gas": gas,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anonymous"]) -> MetaOapg.properties.anonymous: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["constant"]) -> MetaOapg.properties.constant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inputs"]) -> MetaOapg.properties.inputs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outputs"]) -> MetaOapg.properties.outputs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payable"]) -> MetaOapg.properties.payable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateMutability"]) -> MetaOapg.properties.stateMutability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gas"]) -> MetaOapg.properties.gas: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type"], typing_extensions.Literal["anonymous"], typing_extensions.Literal["constant"], typing_extensions.Literal["inputs"], typing_extensions.Literal["name"], typing_extensions.Literal["outputs"], typing_extensions.Literal["payable"], typing_extensions.Literal["stateMutability"], typing_extensions.Literal["gas"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anonymous"]) -> typing.Union[MetaOapg.properties.anonymous, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["constant"]) -> typing.Union[MetaOapg.properties.constant, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inputs"]) -> typing.Union[MetaOapg.properties.inputs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outputs"]) -> typing.Union[MetaOapg.properties.outputs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payable"]) -> typing.Union[MetaOapg.properties.payable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateMutability"]) -> typing.Union[MetaOapg.properties.stateMutability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gas"]) -> typing.Union[MetaOapg.properties.gas, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type"], typing_extensions.Literal["anonymous"], typing_extensions.Literal["constant"], typing_extensions.Literal["inputs"], typing_extensions.Literal["name"], typing_extensions.Literal["outputs"], typing_extensions.Literal["payable"], typing_extensions.Literal["stateMutability"], typing_extensions.Literal["gas"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        anonymous: typing.Union[MetaOapg.properties.anonymous, bool, schemas.Unset] = schemas.unset,
        constant: typing.Union[MetaOapg.properties.constant, bool, schemas.Unset] = schemas.unset,
        inputs: typing.Union[MetaOapg.properties.inputs, list, tuple, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        outputs: typing.Union[MetaOapg.properties.outputs, list, tuple, schemas.Unset] = schemas.unset,
        payable: typing.Union[MetaOapg.properties.payable, bool, schemas.Unset] = schemas.unset,
        stateMutability: typing.Union[MetaOapg.properties.stateMutability, str, schemas.Unset] = schemas.unset,
        gas: typing.Union[MetaOapg.properties.gas, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AbiItem':
        return super().__new__(
            cls,
            *_args,
            type=type,
            anonymous=anonymous,
            constant=constant,
            inputs=inputs,
            name=name,
            outputs=outputs,
            payable=payable,
            stateMutability=stateMutability,
            gas=gas,
            _configuration=_configuration,
        )

from openapi_streams.model.abi_input import AbiInput
from openapi_streams.model.abi_output import AbiOutput
