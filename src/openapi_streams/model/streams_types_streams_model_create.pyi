# coding: utf-8

"""
    Streams Api

    API that provides access to Moralis Streams  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_streams import schemas  # noqa: F401


class StreamsTypesStreamsModelCreate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "description",
            "chainIds",
            "tag",
            "webhookUrl",
        }
        
        class properties:
            webhookUrl = schemas.StrSchema
            description = schemas.StrSchema
            tag = schemas.StrSchema
            
            
            class chainIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'chainIds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class topic0(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'topic0':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            allAddresses = schemas.BoolSchema
            includeNativeTxs = schemas.BoolSchema
            includeContractLogs = schemas.BoolSchema
            includeInternalTxs = schemas.BoolSchema
            includeAllTxLogs = schemas.BoolSchema
            
            
            class getNativeBalances(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GetNativeBalances']:
                        return GetNativeBalances
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['GetNativeBalances'], typing.List['GetNativeBalances']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'getNativeBalances':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GetNativeBalances':
                    return super().__getitem__(i)
            
            
            class abi(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'abi':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class advancedOptions(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AdvancedOptions']:
                        return AdvancedOptions
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'advancedOptions':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            demo = schemas.BoolSchema
            
            
            class triggers(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['StreamsTrigger']:
                        return StreamsTrigger
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'triggers':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "webhookUrl": webhookUrl,
                "description": description,
                "tag": tag,
                "chainIds": chainIds,
                "topic0": topic0,
                "allAddresses": allAddresses,
                "includeNativeTxs": includeNativeTxs,
                "includeContractLogs": includeContractLogs,
                "includeInternalTxs": includeInternalTxs,
                "includeAllTxLogs": includeAllTxLogs,
                "getNativeBalances": getNativeBalances,
                "abi": abi,
                "advancedOptions": advancedOptions,
                "demo": demo,
                "triggers": triggers,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    description: MetaOapg.properties.description
    chainIds: MetaOapg.properties.chainIds
    tag: MetaOapg.properties.tag
    webhookUrl: MetaOapg.properties.webhookUrl
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chainIds"]) -> MetaOapg.properties.chainIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhookUrl"]) -> MetaOapg.properties.webhookUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic0"]) -> MetaOapg.properties.topic0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allAddresses"]) -> MetaOapg.properties.allAddresses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeNativeTxs"]) -> MetaOapg.properties.includeNativeTxs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeContractLogs"]) -> MetaOapg.properties.includeContractLogs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeInternalTxs"]) -> MetaOapg.properties.includeInternalTxs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeAllTxLogs"]) -> MetaOapg.properties.includeAllTxLogs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["getNativeBalances"]) -> MetaOapg.properties.getNativeBalances: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["abi"]) -> MetaOapg.properties.abi: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["advancedOptions"]) -> MetaOapg.properties.advancedOptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["demo"]) -> MetaOapg.properties.demo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["triggers"]) -> MetaOapg.properties.triggers: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description"], typing_extensions.Literal["chainIds"], typing_extensions.Literal["tag"], typing_extensions.Literal["webhookUrl"], typing_extensions.Literal["topic0"], typing_extensions.Literal["allAddresses"], typing_extensions.Literal["includeNativeTxs"], typing_extensions.Literal["includeContractLogs"], typing_extensions.Literal["includeInternalTxs"], typing_extensions.Literal["includeAllTxLogs"], typing_extensions.Literal["getNativeBalances"], typing_extensions.Literal["abi"], typing_extensions.Literal["advancedOptions"], typing_extensions.Literal["demo"], typing_extensions.Literal["triggers"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chainIds"]) -> MetaOapg.properties.chainIds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhookUrl"]) -> MetaOapg.properties.webhookUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic0"]) -> typing.Union[MetaOapg.properties.topic0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allAddresses"]) -> typing.Union[MetaOapg.properties.allAddresses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeNativeTxs"]) -> typing.Union[MetaOapg.properties.includeNativeTxs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeContractLogs"]) -> typing.Union[MetaOapg.properties.includeContractLogs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeInternalTxs"]) -> typing.Union[MetaOapg.properties.includeInternalTxs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeAllTxLogs"]) -> typing.Union[MetaOapg.properties.includeAllTxLogs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["getNativeBalances"]) -> typing.Union[MetaOapg.properties.getNativeBalances, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["abi"]) -> typing.Union[MetaOapg.properties.abi, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["advancedOptions"]) -> typing.Union[MetaOapg.properties.advancedOptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["demo"]) -> typing.Union[MetaOapg.properties.demo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["triggers"]) -> typing.Union[MetaOapg.properties.triggers, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description"], typing_extensions.Literal["chainIds"], typing_extensions.Literal["tag"], typing_extensions.Literal["webhookUrl"], typing_extensions.Literal["topic0"], typing_extensions.Literal["allAddresses"], typing_extensions.Literal["includeNativeTxs"], typing_extensions.Literal["includeContractLogs"], typing_extensions.Literal["includeInternalTxs"], typing_extensions.Literal["includeAllTxLogs"], typing_extensions.Literal["getNativeBalances"], typing_extensions.Literal["abi"], typing_extensions.Literal["advancedOptions"], typing_extensions.Literal["demo"], typing_extensions.Literal["triggers"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        chainIds: typing.Union[MetaOapg.properties.chainIds, list, tuple, ],
        tag: typing.Union[MetaOapg.properties.tag, str, ],
        webhookUrl: typing.Union[MetaOapg.properties.webhookUrl, str, ],
        topic0: typing.Union[MetaOapg.properties.topic0, list, tuple, None, schemas.Unset] = schemas.unset,
        allAddresses: typing.Union[MetaOapg.properties.allAddresses, bool, schemas.Unset] = schemas.unset,
        includeNativeTxs: typing.Union[MetaOapg.properties.includeNativeTxs, bool, schemas.Unset] = schemas.unset,
        includeContractLogs: typing.Union[MetaOapg.properties.includeContractLogs, bool, schemas.Unset] = schemas.unset,
        includeInternalTxs: typing.Union[MetaOapg.properties.includeInternalTxs, bool, schemas.Unset] = schemas.unset,
        includeAllTxLogs: typing.Union[MetaOapg.properties.includeAllTxLogs, bool, schemas.Unset] = schemas.unset,
        getNativeBalances: typing.Union[MetaOapg.properties.getNativeBalances, list, tuple, schemas.Unset] = schemas.unset,
        abi: typing.Union[MetaOapg.properties.abi, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        advancedOptions: typing.Union[MetaOapg.properties.advancedOptions, list, tuple, None, schemas.Unset] = schemas.unset,
        demo: typing.Union[MetaOapg.properties.demo, bool, schemas.Unset] = schemas.unset,
        triggers: typing.Union[MetaOapg.properties.triggers, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'StreamsTypesStreamsModelCreate':
        return super().__new__(
            cls,
            *args,
            description=description,
            chainIds=chainIds,
            tag=tag,
            webhookUrl=webhookUrl,
            topic0=topic0,
            allAddresses=allAddresses,
            includeNativeTxs=includeNativeTxs,
            includeContractLogs=includeContractLogs,
            includeInternalTxs=includeInternalTxs,
            includeAllTxLogs=includeAllTxLogs,
            getNativeBalances=getNativeBalances,
            abi=abi,
            advancedOptions=advancedOptions,
            demo=demo,
            triggers=triggers,
            _configuration=_configuration,
        )

from openapi_streams.model.advanced_options import AdvancedOptions
from openapi_streams.model.get_native_balances import GetNativeBalances
from openapi_streams.model.streams_trigger import StreamsTrigger
