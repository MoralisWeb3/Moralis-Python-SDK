# coding: utf-8

"""
    Streams Api

    API that provides access to Moralis Streams  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_streams import schemas  # noqa: F401


class AdvancedOptions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Advanced Options for each specific topic
    """


    class MetaOapg:
        required = {
            "topic0",
        }
        
        class properties:
            topic0 = schemas.StrSchema
        
            @staticmethod
            def filter() -> typing.Type['StreamsFilter']:
                return StreamsFilter
            includeNativeTxs = schemas.BoolSchema
            __annotations__ = {
                "topic0": topic0,
                "filter": filter,
                "includeNativeTxs": includeNativeTxs,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    topic0: MetaOapg.properties.topic0
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic0"]) -> MetaOapg.properties.topic0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter"]) -> 'StreamsFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeNativeTxs"]) -> MetaOapg.properties.includeNativeTxs: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["topic0"], typing_extensions.Literal["filter"], typing_extensions.Literal["includeNativeTxs"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic0"]) -> MetaOapg.properties.topic0: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> typing.Union['StreamsFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeNativeTxs"]) -> typing.Union[MetaOapg.properties.includeNativeTxs, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["topic0"], typing_extensions.Literal["filter"], typing_extensions.Literal["includeNativeTxs"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        topic0: typing.Union[MetaOapg.properties.topic0, str, ],
        filter: typing.Union['StreamsFilter', schemas.Unset] = schemas.unset,
        includeNativeTxs: typing.Union[MetaOapg.properties.includeNativeTxs, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AdvancedOptions':
        return super().__new__(
            cls,
            *_args,
            topic0=topic0,
            filter=filter,
            includeNativeTxs=includeNativeTxs,
            _configuration=_configuration,
        )

from openapi_streams.model.streams_filter import StreamsFilter
