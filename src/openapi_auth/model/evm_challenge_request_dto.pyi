# coding: utf-8

"""
    Auth API

    API that provides authentication services for dapps.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_auth import schemas  # noqa: F401


class EvmChallengeRequestDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "address",
            "chainId",
            "domain",
            "uri",
            "timeout",
        }
        
        class properties:
            domain = schemas.StrSchema
            uri = schemas.StrSchema
            
            
            class timeout(
                schemas.NumberSchema
            ):
                pass
            
            
            class chainId(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls("1")
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls("5")
                
                @schemas.classproperty
                def POSITIVE_10(cls):
                    return cls("10")
                
                @schemas.classproperty
                def POSITIVE_25(cls):
                    return cls("25")
                
                @schemas.classproperty
                def POSITIVE_56(cls):
                    return cls("56")
                
                @schemas.classproperty
                def POSITIVE_97(cls):
                    return cls("97")
                
                @schemas.classproperty
                def POSITIVE_100(cls):
                    return cls("100")
                
                @schemas.classproperty
                def POSITIVE_137(cls):
                    return cls("137")
                
                @schemas.classproperty
                def POSITIVE_250(cls):
                    return cls("250")
                
                @schemas.classproperty
                def POSITIVE_338(cls):
                    return cls("338")
                
                @schemas.classproperty
                def POSITIVE_420(cls):
                    return cls("420")
                
                @schemas.classproperty
                def POSITIVE_1284(cls):
                    return cls("1284")
                
                @schemas.classproperty
                def POSITIVE_1285(cls):
                    return cls("1285")
                
                @schemas.classproperty
                def POSITIVE_1287(cls):
                    return cls("1287")
                
                @schemas.classproperty
                def POSITIVE_1337(cls):
                    return cls("1337")
                
                @schemas.classproperty
                def POSITIVE_8453(cls):
                    return cls("8453")
                
                @schemas.classproperty
                def POSITIVE_10200(cls):
                    return cls("10200")
                
                @schemas.classproperty
                def POSITIVE_43113(cls):
                    return cls("43113")
                
                @schemas.classproperty
                def POSITIVE_43114(cls):
                    return cls("43114")
                
                @schemas.classproperty
                def POSITIVE_80001(cls):
                    return cls("80001")
                
                @schemas.classproperty
                def POSITIVE_80002(cls):
                    return cls("80002")
                
                @schemas.classproperty
                def POSITIVE_84531(cls):
                    return cls("84531")
                
                @schemas.classproperty
                def POSITIVE_88882(cls):
                    return cls("88882")
                
                @schemas.classproperty
                def POSITIVE_88888(cls):
                    return cls("88888")
                
                @schemas.classproperty
                def POSITIVE_11155111(cls):
                    return cls("11155111")
            address = schemas.StrSchema
            statement = schemas.StrSchema
            expirationTime = schemas.DateTimeSchema
            notBefore = schemas.DateTimeSchema
            
            
            class resources(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'resources':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "domain": domain,
                "uri": uri,
                "timeout": timeout,
                "chainId": chainId,
                "address": address,
                "statement": statement,
                "expirationTime": expirationTime,
                "notBefore": notBefore,
                "resources": resources,
            }
    
    address: MetaOapg.properties.address
    chainId: MetaOapg.properties.chainId
    domain: MetaOapg.properties.domain
    uri: MetaOapg.properties.uri
    timeout: MetaOapg.properties.timeout
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeout"]) -> MetaOapg.properties.timeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chainId"]) -> MetaOapg.properties.chainId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statement"]) -> MetaOapg.properties.statement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationTime"]) -> MetaOapg.properties.expirationTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notBefore"]) -> MetaOapg.properties.notBefore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resources"]) -> MetaOapg.properties.resources: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["domain", "uri", "timeout", "chainId", "address", "statement", "expirationTime", "notBefore", "resources", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeout"]) -> MetaOapg.properties.timeout: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chainId"]) -> MetaOapg.properties.chainId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statement"]) -> typing.Union[MetaOapg.properties.statement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationTime"]) -> typing.Union[MetaOapg.properties.expirationTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notBefore"]) -> typing.Union[MetaOapg.properties.notBefore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resources"]) -> typing.Union[MetaOapg.properties.resources, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["domain", "uri", "timeout", "chainId", "address", "statement", "expirationTime", "notBefore", "resources", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        address: typing.Union[MetaOapg.properties.address, str, ],
        chainId: typing.Union[MetaOapg.properties.chainId, str, ],
        domain: typing.Union[MetaOapg.properties.domain, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        timeout: typing.Union[MetaOapg.properties.timeout, decimal.Decimal, int, float, ],
        statement: typing.Union[MetaOapg.properties.statement, str, schemas.Unset] = schemas.unset,
        expirationTime: typing.Union[MetaOapg.properties.expirationTime, str, datetime, schemas.Unset] = schemas.unset,
        notBefore: typing.Union[MetaOapg.properties.notBefore, str, datetime, schemas.Unset] = schemas.unset,
        resources: typing.Union[MetaOapg.properties.resources, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EvmChallengeRequestDto':
        return super().__new__(
            cls,
            *args,
            address=address,
            chainId=chainId,
            domain=domain,
            uri=uri,
            timeout=timeout,
            statement=statement,
            expirationTime=expirationTime,
            notBefore=notBefore,
            resources=resources,
            _configuration=_configuration,
            **kwargs,
        )
