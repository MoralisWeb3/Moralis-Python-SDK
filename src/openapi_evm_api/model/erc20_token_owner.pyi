# coding: utf-8

"""
    EVM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_evm_api import schemas  # noqa: F401


class Erc20TokenOwner(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "is_contract",
            "percentage_relative_to_total_supply",
            "balance",
            "balance_formatted",
            "owner_address",
            "owner_address_label",
            "usd_value",
        }
        
        class properties:
            owner_address = schemas.StrSchema
            owner_address_label = schemas.StrSchema
            balance = schemas.StrSchema
            balance_formatted = schemas.StrSchema
            usd_value = schemas.StrSchema
            is_contract = schemas.BoolSchema
            percentage_relative_to_total_supply = schemas.NumberSchema
            __annotations__ = {
                "owner_address": owner_address,
                "owner_address_label": owner_address_label,
                "balance": balance,
                "balance_formatted": balance_formatted,
                "usd_value": usd_value,
                "is_contract": is_contract,
                "percentage_relative_to_total_supply": percentage_relative_to_total_supply,
            }

    
    is_contract: MetaOapg.properties.is_contract
    percentage_relative_to_total_supply: MetaOapg.properties.percentage_relative_to_total_supply
    balance: MetaOapg.properties.balance
    balance_formatted: MetaOapg.properties.balance_formatted
    owner_address: MetaOapg.properties.owner_address
    owner_address_label: MetaOapg.properties.owner_address_label
    usd_value: MetaOapg.properties.usd_value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner_address"]) -> MetaOapg.properties.owner_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner_address_label"]) -> MetaOapg.properties.owner_address_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance_formatted"]) -> MetaOapg.properties.balance_formatted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usd_value"]) -> MetaOapg.properties.usd_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_contract"]) -> MetaOapg.properties.is_contract: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["percentage_relative_to_total_supply"]) -> MetaOapg.properties.percentage_relative_to_total_supply: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["owner_address", "owner_address_label", "balance", "balance_formatted", "usd_value", "is_contract", "percentage_relative_to_total_supply", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner_address"]) -> MetaOapg.properties.owner_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner_address_label"]) -> MetaOapg.properties.owner_address_label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance_formatted"]) -> MetaOapg.properties.balance_formatted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usd_value"]) -> MetaOapg.properties.usd_value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_contract"]) -> MetaOapg.properties.is_contract: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["percentage_relative_to_total_supply"]) -> MetaOapg.properties.percentage_relative_to_total_supply: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["owner_address", "owner_address_label", "balance", "balance_formatted", "usd_value", "is_contract", "percentage_relative_to_total_supply", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        is_contract: typing.Union[MetaOapg.properties.is_contract, bool, ],
        percentage_relative_to_total_supply: typing.Union[MetaOapg.properties.percentage_relative_to_total_supply, decimal.Decimal, int, float, ],
        balance: typing.Union[MetaOapg.properties.balance, str, ],
        balance_formatted: typing.Union[MetaOapg.properties.balance_formatted, str, ],
        owner_address: typing.Union[MetaOapg.properties.owner_address, str, ],
        owner_address_label: typing.Union[MetaOapg.properties.owner_address_label, str, ],
        usd_value: typing.Union[MetaOapg.properties.usd_value, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Erc20TokenOwner':
        return super().__new__(
            cls,
            *args,
            is_contract=is_contract,
            percentage_relative_to_total_supply=percentage_relative_to_total_supply,
            balance=balance,
            balance_formatted=balance_formatted,
            owner_address=owner_address,
            owner_address_label=owner_address_label,
            usd_value=usd_value,
            _configuration=_configuration,
            **kwargs,
        )
