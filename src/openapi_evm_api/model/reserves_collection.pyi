# coding: utf-8

"""
    EVM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_evm_api import schemas  # noqa: F401


class ReservesCollection(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class token0(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        address = schemas.StrSchema
                        name = schemas.StrSchema
                        symbol = schemas.StrSchema
                        decimals = schemas.StrSchema
                        logo = schemas.StrSchema
                        logo_hash = schemas.StrSchema
                        thumbnail = schemas.StrSchema
                        block_number = schemas.StrSchema
                        validated = schemas.NumberSchema
                        created_at = schemas.StrSchema
                        __annotations__ = {
                            "address": address,
                            "name": name,
                            "symbol": symbol,
                            "decimals": decimals,
                            "logo": logo,
                            "logo_hash": logo_hash,
                            "thumbnail": thumbnail,
                            "block_number": block_number,
                            "validated": validated,
                            "created_at": created_at,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["decimals"]) -> MetaOapg.properties.decimals: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["logo"]) -> MetaOapg.properties.logo: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["logo_hash"]) -> MetaOapg.properties.logo_hash: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["thumbnail"]) -> MetaOapg.properties.thumbnail: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["block_number"]) -> MetaOapg.properties.block_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["validated"]) -> MetaOapg.properties.validated: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["address", "name", "symbol", "decimals", "logo", "logo_hash", "thumbnail", "block_number", "validated", "created_at", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["decimals"]) -> typing.Union[MetaOapg.properties.decimals, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["logo"]) -> typing.Union[MetaOapg.properties.logo, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["logo_hash"]) -> typing.Union[MetaOapg.properties.logo_hash, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["thumbnail"]) -> typing.Union[MetaOapg.properties.thumbnail, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["block_number"]) -> typing.Union[MetaOapg.properties.block_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["validated"]) -> typing.Union[MetaOapg.properties.validated, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address", "name", "symbol", "decimals", "logo", "logo_hash", "thumbnail", "block_number", "validated", "created_at", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                    symbol: typing.Union[MetaOapg.properties.symbol, str, schemas.Unset] = schemas.unset,
                    decimals: typing.Union[MetaOapg.properties.decimals, str, schemas.Unset] = schemas.unset,
                    logo: typing.Union[MetaOapg.properties.logo, str, schemas.Unset] = schemas.unset,
                    logo_hash: typing.Union[MetaOapg.properties.logo_hash, str, schemas.Unset] = schemas.unset,
                    thumbnail: typing.Union[MetaOapg.properties.thumbnail, str, schemas.Unset] = schemas.unset,
                    block_number: typing.Union[MetaOapg.properties.block_number, str, schemas.Unset] = schemas.unset,
                    validated: typing.Union[MetaOapg.properties.validated, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'token0':
                    return super().__new__(
                        cls,
                        *args,
                        address=address,
                        name=name,
                        symbol=symbol,
                        decimals=decimals,
                        logo=logo,
                        logo_hash=logo_hash,
                        thumbnail=thumbnail,
                        block_number=block_number,
                        validated=validated,
                        created_at=created_at,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class token1(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        address = schemas.StrSchema
                        name = schemas.StrSchema
                        symbol = schemas.StrSchema
                        decimals = schemas.StrSchema
                        logo = schemas.StrSchema
                        logo_hash = schemas.StrSchema
                        thumbnail = schemas.StrSchema
                        block_number = schemas.StrSchema
                        validated = schemas.NumberSchema
                        created_at = schemas.StrSchema
                        __annotations__ = {
                            "address": address,
                            "name": name,
                            "symbol": symbol,
                            "decimals": decimals,
                            "logo": logo,
                            "logo_hash": logo_hash,
                            "thumbnail": thumbnail,
                            "block_number": block_number,
                            "validated": validated,
                            "created_at": created_at,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["decimals"]) -> MetaOapg.properties.decimals: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["logo"]) -> MetaOapg.properties.logo: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["logo_hash"]) -> MetaOapg.properties.logo_hash: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["thumbnail"]) -> MetaOapg.properties.thumbnail: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["block_number"]) -> MetaOapg.properties.block_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["validated"]) -> MetaOapg.properties.validated: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["address", "name", "symbol", "decimals", "logo", "logo_hash", "thumbnail", "block_number", "validated", "created_at", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["decimals"]) -> typing.Union[MetaOapg.properties.decimals, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["logo"]) -> typing.Union[MetaOapg.properties.logo, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["logo_hash"]) -> typing.Union[MetaOapg.properties.logo_hash, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["thumbnail"]) -> typing.Union[MetaOapg.properties.thumbnail, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["block_number"]) -> typing.Union[MetaOapg.properties.block_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["validated"]) -> typing.Union[MetaOapg.properties.validated, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address", "name", "symbol", "decimals", "logo", "logo_hash", "thumbnail", "block_number", "validated", "created_at", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                    symbol: typing.Union[MetaOapg.properties.symbol, str, schemas.Unset] = schemas.unset,
                    decimals: typing.Union[MetaOapg.properties.decimals, str, schemas.Unset] = schemas.unset,
                    logo: typing.Union[MetaOapg.properties.logo, str, schemas.Unset] = schemas.unset,
                    logo_hash: typing.Union[MetaOapg.properties.logo_hash, str, schemas.Unset] = schemas.unset,
                    thumbnail: typing.Union[MetaOapg.properties.thumbnail, str, schemas.Unset] = schemas.unset,
                    block_number: typing.Union[MetaOapg.properties.block_number, str, schemas.Unset] = schemas.unset,
                    validated: typing.Union[MetaOapg.properties.validated, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'token1':
                    return super().__new__(
                        cls,
                        *args,
                        address=address,
                        name=name,
                        symbol=symbol,
                        decimals=decimals,
                        logo=logo,
                        logo_hash=logo_hash,
                        thumbnail=thumbnail,
                        block_number=block_number,
                        validated=validated,
                        created_at=created_at,
                        _configuration=_configuration,
                        **kwargs,
                    )
            pairAddress = schemas.StrSchema
            __annotations__ = {
                "token0": token0,
                "token1": token1,
                "pairAddress": pairAddress,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token0"]) -> MetaOapg.properties.token0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token1"]) -> MetaOapg.properties.token1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pairAddress"]) -> MetaOapg.properties.pairAddress: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["token0", "token1", "pairAddress", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token0"]) -> typing.Union[MetaOapg.properties.token0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token1"]) -> typing.Union[MetaOapg.properties.token1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pairAddress"]) -> typing.Union[MetaOapg.properties.pairAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["token0", "token1", "pairAddress", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        token0: typing.Union[MetaOapg.properties.token0, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        token1: typing.Union[MetaOapg.properties.token1, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        pairAddress: typing.Union[MetaOapg.properties.pairAddress, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReservesCollection':
        return super().__new__(
            cls,
            *args,
            token0=token0,
            token1=token1,
            pairAddress=pairAddress,
            _configuration=_configuration,
            **kwargs,
        )
