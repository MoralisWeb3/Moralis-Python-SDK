# coding: utf-8

"""
    EVM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_evm_api import schemas  # noqa: F401


class GroupedTrait(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "values",
            "trait_type",
        }
        
        class properties:
            trait_type = schemas.StrSchema
            
            
            class values(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.AnyTypeSchema,
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "percentage",
                                "count",
                                "trait_value",
                                "rarity_label",
                            }
                            
                            class properties:
                                trait_value = schemas.StrSchema
                                count = schemas.NumberSchema
                                percentage = schemas.NumberSchema
                                rarity_label = schemas.StrSchema
                                __annotations__ = {
                                    "trait_value": trait_value,
                                    "count": count,
                                    "percentage": percentage,
                                    "rarity_label": rarity_label,
                                }
                    
                        
                        percentage: MetaOapg.properties.percentage
                        count: MetaOapg.properties.count
                        trait_value: MetaOapg.properties.trait_value
                        rarity_label: MetaOapg.properties.rarity_label
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["trait_value"]) -> MetaOapg.properties.trait_value: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["percentage"]) -> MetaOapg.properties.percentage: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["rarity_label"]) -> MetaOapg.properties.rarity_label: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["trait_value", "count", "percentage", "rarity_label", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["trait_value"]) -> MetaOapg.properties.trait_value: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["percentage"]) -> MetaOapg.properties.percentage: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["rarity_label"]) -> MetaOapg.properties.rarity_label: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["trait_value", "count", "percentage", "rarity_label", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            percentage: typing.Union[MetaOapg.properties.percentage, decimal.Decimal, int, float, ],
                            count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, float, ],
                            trait_value: typing.Union[MetaOapg.properties.trait_value, str, ],
                            rarity_label: typing.Union[MetaOapg.properties.rarity_label, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                percentage=percentage,
                                count=count,
                                trait_value=trait_value,
                                rarity_label=rarity_label,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'values':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "trait_type": trait_type,
                "values": values,
            }

    
    values: MetaOapg.properties.values
    trait_type: MetaOapg.properties.trait_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trait_type"]) -> MetaOapg.properties.trait_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["values"]) -> MetaOapg.properties.values: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["trait_type", "values", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trait_type"]) -> MetaOapg.properties.trait_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["values"]) -> MetaOapg.properties.values: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["trait_type", "values", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        values: typing.Union[MetaOapg.properties.values, list, tuple, ],
        trait_type: typing.Union[MetaOapg.properties.trait_type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GroupedTrait':
        return super().__new__(
            cls,
            *args,
            values=values,
            trait_type=trait_type,
            _configuration=_configuration,
            **kwargs,
        )
