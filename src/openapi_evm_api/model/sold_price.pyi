# coding: utf-8

"""
    EVM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_evm_api import schemas  # noqa: F401


class SoldPrice(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "last_sale",
            "average_sale",
            "highest_sale",
            "lowest_sale",
        }
        
        class properties:
            
            
            class last_sale(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    required = {
                        "buyer_address",
                        "price",
                        "block_timestamp",
                        "payment_token",
                        "seller_address",
                        "transaction_hash",
                        "price_formatted",
                    }
                    
                    class properties:
                        transaction_hash = schemas.StrSchema
                        block_timestamp = schemas.StrSchema
                        buyer_address = schemas.StrSchema
                        seller_address = schemas.StrSchema
                        price = schemas.StrSchema
                        price_formatted = schemas.StrSchema
                        usd_price_at_sale = schemas.StrSchema
                        current_usd_value = schemas.StrSchema
                        token_id = schemas.StrSchema
                        
                        
                        class payment_token(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "token_logo",
                                    "token_name",
                                    "token_address",
                                    "token_decimals",
                                    "token_symbol",
                                }
                                
                                class properties:
                                    token_name = schemas.StrSchema
                                    token_symbol = schemas.StrSchema
                                    token_logo = schemas.StrSchema
                                    token_decimals = schemas.StrSchema
                                    token_address = schemas.StrSchema
                                    __annotations__ = {
                                        "token_name": token_name,
                                        "token_symbol": token_symbol,
                                        "token_logo": token_logo,
                                        "token_decimals": token_decimals,
                                        "token_address": token_address,
                                    }
                            
                            token_logo: MetaOapg.properties.token_logo
                            token_name: MetaOapg.properties.token_name
                            token_address: MetaOapg.properties.token_address
                            token_decimals: MetaOapg.properties.token_decimals
                            token_symbol: MetaOapg.properties.token_symbol
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_name"]) -> MetaOapg.properties.token_name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_symbol"]) -> MetaOapg.properties.token_symbol: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_logo"]) -> MetaOapg.properties.token_logo: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_decimals"]) -> MetaOapg.properties.token_decimals: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_address"]) -> MetaOapg.properties.token_address: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["token_name", "token_symbol", "token_logo", "token_decimals", "token_address", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_name"]) -> MetaOapg.properties.token_name: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_symbol"]) -> MetaOapg.properties.token_symbol: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_logo"]) -> MetaOapg.properties.token_logo: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_decimals"]) -> MetaOapg.properties.token_decimals: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_address"]) -> MetaOapg.properties.token_address: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["token_name", "token_symbol", "token_logo", "token_decimals", "token_address", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                token_logo: typing.Union[MetaOapg.properties.token_logo, str, ],
                                token_name: typing.Union[MetaOapg.properties.token_name, str, ],
                                token_address: typing.Union[MetaOapg.properties.token_address, str, ],
                                token_decimals: typing.Union[MetaOapg.properties.token_decimals, str, ],
                                token_symbol: typing.Union[MetaOapg.properties.token_symbol, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'payment_token':
                                return super().__new__(
                                    cls,
                                    *args,
                                    token_logo=token_logo,
                                    token_name=token_name,
                                    token_address=token_address,
                                    token_decimals=token_decimals,
                                    token_symbol=token_symbol,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "transaction_hash": transaction_hash,
                            "block_timestamp": block_timestamp,
                            "buyer_address": buyer_address,
                            "seller_address": seller_address,
                            "price": price,
                            "price_formatted": price_formatted,
                            "usd_price_at_sale": usd_price_at_sale,
                            "current_usd_value": current_usd_value,
                            "token_id": token_id,
                            "payment_token": payment_token,
                        }
            
                
                buyer_address: MetaOapg.properties.buyer_address
                price: MetaOapg.properties.price
                block_timestamp: MetaOapg.properties.block_timestamp
                payment_token: MetaOapg.properties.payment_token
                seller_address: MetaOapg.properties.seller_address
                transaction_hash: MetaOapg.properties.transaction_hash
                price_formatted: MetaOapg.properties.price_formatted
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["transaction_hash"]) -> MetaOapg.properties.transaction_hash: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["block_timestamp"]) -> MetaOapg.properties.block_timestamp: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["buyer_address"]) -> MetaOapg.properties.buyer_address: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["seller_address"]) -> MetaOapg.properties.seller_address: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["price_formatted"]) -> MetaOapg.properties.price_formatted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["usd_price_at_sale"]) -> MetaOapg.properties.usd_price_at_sale: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["current_usd_value"]) -> MetaOapg.properties.current_usd_value: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["token_id"]) -> MetaOapg.properties.token_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["payment_token"]) -> MetaOapg.properties.payment_token: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["transaction_hash", "block_timestamp", "buyer_address", "seller_address", "price", "price_formatted", "usd_price_at_sale", "current_usd_value", "token_id", "payment_token", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["transaction_hash"]) -> MetaOapg.properties.transaction_hash: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["block_timestamp"]) -> MetaOapg.properties.block_timestamp: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["buyer_address"]) -> MetaOapg.properties.buyer_address: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["seller_address"]) -> MetaOapg.properties.seller_address: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["price_formatted"]) -> MetaOapg.properties.price_formatted: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["usd_price_at_sale"]) -> typing.Union[MetaOapg.properties.usd_price_at_sale, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["current_usd_value"]) -> typing.Union[MetaOapg.properties.current_usd_value, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["token_id"]) -> typing.Union[MetaOapg.properties.token_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["payment_token"]) -> MetaOapg.properties.payment_token: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transaction_hash", "block_timestamp", "buyer_address", "seller_address", "price", "price_formatted", "usd_price_at_sale", "current_usd_value", "token_id", "payment_token", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    usd_price_at_sale: typing.Union[MetaOapg.properties.usd_price_at_sale, str, schemas.Unset] = schemas.unset,
                    current_usd_value: typing.Union[MetaOapg.properties.current_usd_value, str, schemas.Unset] = schemas.unset,
                    token_id: typing.Union[MetaOapg.properties.token_id, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'last_sale':
                    return super().__new__(
                        cls,
                        *args,
                        usd_price_at_sale=usd_price_at_sale,
                        current_usd_value=current_usd_value,
                        token_id=token_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class lowest_sale(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    required = {
                        "price",
                        "block_timestamp",
                        "payment_token",
                        "transaction_hash",
                        "price_formatted",
                    }
                    
                    class properties:
                        transaction_hash = schemas.StrSchema
                        block_timestamp = schemas.StrSchema
                        buyer_address = schemas.StrSchema
                        seller_address = schemas.StrSchema
                        price = schemas.StrSchema
                        price_formatted = schemas.StrSchema
                        usd_price_at_sale = schemas.StrSchema
                        current_usd_value = schemas.StrSchema
                        token_id = schemas.StrSchema
                        
                        
                        class payment_token(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "token_logo",
                                    "token_name",
                                    "token_address",
                                    "token_decimals",
                                    "token_symbol",
                                }
                                
                                class properties:
                                    token_name = schemas.StrSchema
                                    token_symbol = schemas.StrSchema
                                    token_logo = schemas.StrSchema
                                    token_decimals = schemas.StrSchema
                                    token_address = schemas.StrSchema
                                    __annotations__ = {
                                        "token_name": token_name,
                                        "token_symbol": token_symbol,
                                        "token_logo": token_logo,
                                        "token_decimals": token_decimals,
                                        "token_address": token_address,
                                    }
                            
                            token_logo: MetaOapg.properties.token_logo
                            token_name: MetaOapg.properties.token_name
                            token_address: MetaOapg.properties.token_address
                            token_decimals: MetaOapg.properties.token_decimals
                            token_symbol: MetaOapg.properties.token_symbol
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_name"]) -> MetaOapg.properties.token_name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_symbol"]) -> MetaOapg.properties.token_symbol: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_logo"]) -> MetaOapg.properties.token_logo: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_decimals"]) -> MetaOapg.properties.token_decimals: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_address"]) -> MetaOapg.properties.token_address: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["token_name", "token_symbol", "token_logo", "token_decimals", "token_address", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_name"]) -> MetaOapg.properties.token_name: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_symbol"]) -> MetaOapg.properties.token_symbol: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_logo"]) -> MetaOapg.properties.token_logo: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_decimals"]) -> MetaOapg.properties.token_decimals: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_address"]) -> MetaOapg.properties.token_address: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["token_name", "token_symbol", "token_logo", "token_decimals", "token_address", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                token_logo: typing.Union[MetaOapg.properties.token_logo, str, ],
                                token_name: typing.Union[MetaOapg.properties.token_name, str, ],
                                token_address: typing.Union[MetaOapg.properties.token_address, str, ],
                                token_decimals: typing.Union[MetaOapg.properties.token_decimals, str, ],
                                token_symbol: typing.Union[MetaOapg.properties.token_symbol, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'payment_token':
                                return super().__new__(
                                    cls,
                                    *args,
                                    token_logo=token_logo,
                                    token_name=token_name,
                                    token_address=token_address,
                                    token_decimals=token_decimals,
                                    token_symbol=token_symbol,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "transaction_hash": transaction_hash,
                            "block_timestamp": block_timestamp,
                            "buyer_address": buyer_address,
                            "seller_address": seller_address,
                            "price": price,
                            "price_formatted": price_formatted,
                            "usd_price_at_sale": usd_price_at_sale,
                            "current_usd_value": current_usd_value,
                            "token_id": token_id,
                            "payment_token": payment_token,
                        }
            
                
                price: MetaOapg.properties.price
                block_timestamp: MetaOapg.properties.block_timestamp
                payment_token: MetaOapg.properties.payment_token
                transaction_hash: MetaOapg.properties.transaction_hash
                price_formatted: MetaOapg.properties.price_formatted
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["transaction_hash"]) -> MetaOapg.properties.transaction_hash: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["block_timestamp"]) -> MetaOapg.properties.block_timestamp: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["buyer_address"]) -> MetaOapg.properties.buyer_address: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["seller_address"]) -> MetaOapg.properties.seller_address: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["price_formatted"]) -> MetaOapg.properties.price_formatted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["usd_price_at_sale"]) -> MetaOapg.properties.usd_price_at_sale: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["current_usd_value"]) -> MetaOapg.properties.current_usd_value: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["token_id"]) -> MetaOapg.properties.token_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["payment_token"]) -> MetaOapg.properties.payment_token: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["transaction_hash", "block_timestamp", "buyer_address", "seller_address", "price", "price_formatted", "usd_price_at_sale", "current_usd_value", "token_id", "payment_token", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["transaction_hash"]) -> MetaOapg.properties.transaction_hash: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["block_timestamp"]) -> MetaOapg.properties.block_timestamp: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["buyer_address"]) -> typing.Union[MetaOapg.properties.buyer_address, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["seller_address"]) -> typing.Union[MetaOapg.properties.seller_address, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["price_formatted"]) -> MetaOapg.properties.price_formatted: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["usd_price_at_sale"]) -> typing.Union[MetaOapg.properties.usd_price_at_sale, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["current_usd_value"]) -> typing.Union[MetaOapg.properties.current_usd_value, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["token_id"]) -> typing.Union[MetaOapg.properties.token_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["payment_token"]) -> MetaOapg.properties.payment_token: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transaction_hash", "block_timestamp", "buyer_address", "seller_address", "price", "price_formatted", "usd_price_at_sale", "current_usd_value", "token_id", "payment_token", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    buyer_address: typing.Union[MetaOapg.properties.buyer_address, str, schemas.Unset] = schemas.unset,
                    seller_address: typing.Union[MetaOapg.properties.seller_address, str, schemas.Unset] = schemas.unset,
                    usd_price_at_sale: typing.Union[MetaOapg.properties.usd_price_at_sale, str, schemas.Unset] = schemas.unset,
                    current_usd_value: typing.Union[MetaOapg.properties.current_usd_value, str, schemas.Unset] = schemas.unset,
                    token_id: typing.Union[MetaOapg.properties.token_id, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'lowest_sale':
                    return super().__new__(
                        cls,
                        *args,
                        buyer_address=buyer_address,
                        seller_address=seller_address,
                        usd_price_at_sale=usd_price_at_sale,
                        current_usd_value=current_usd_value,
                        token_id=token_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class highest_sale(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    required = {
                        "price",
                        "block_timestamp",
                        "payment_token",
                        "transaction_hash",
                        "price_formatted",
                    }
                    
                    class properties:
                        transaction_hash = schemas.StrSchema
                        block_timestamp = schemas.StrSchema
                        buyer_address = schemas.StrSchema
                        seller_address = schemas.StrSchema
                        price = schemas.StrSchema
                        price_formatted = schemas.StrSchema
                        usd_price_at_sale = schemas.StrSchema
                        current_usd_value = schemas.StrSchema
                        token_id = schemas.StrSchema
                        
                        
                        class payment_token(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "token_logo",
                                    "token_name",
                                    "token_address",
                                    "token_decimals",
                                    "token_symbol",
                                }
                                
                                class properties:
                                    token_name = schemas.StrSchema
                                    token_symbol = schemas.StrSchema
                                    token_logo = schemas.StrSchema
                                    token_decimals = schemas.StrSchema
                                    token_address = schemas.StrSchema
                                    __annotations__ = {
                                        "token_name": token_name,
                                        "token_symbol": token_symbol,
                                        "token_logo": token_logo,
                                        "token_decimals": token_decimals,
                                        "token_address": token_address,
                                    }
                            
                            token_logo: MetaOapg.properties.token_logo
                            token_name: MetaOapg.properties.token_name
                            token_address: MetaOapg.properties.token_address
                            token_decimals: MetaOapg.properties.token_decimals
                            token_symbol: MetaOapg.properties.token_symbol
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_name"]) -> MetaOapg.properties.token_name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_symbol"]) -> MetaOapg.properties.token_symbol: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_logo"]) -> MetaOapg.properties.token_logo: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_decimals"]) -> MetaOapg.properties.token_decimals: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["token_address"]) -> MetaOapg.properties.token_address: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["token_name", "token_symbol", "token_logo", "token_decimals", "token_address", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_name"]) -> MetaOapg.properties.token_name: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_symbol"]) -> MetaOapg.properties.token_symbol: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_logo"]) -> MetaOapg.properties.token_logo: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_decimals"]) -> MetaOapg.properties.token_decimals: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["token_address"]) -> MetaOapg.properties.token_address: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["token_name", "token_symbol", "token_logo", "token_decimals", "token_address", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                token_logo: typing.Union[MetaOapg.properties.token_logo, str, ],
                                token_name: typing.Union[MetaOapg.properties.token_name, str, ],
                                token_address: typing.Union[MetaOapg.properties.token_address, str, ],
                                token_decimals: typing.Union[MetaOapg.properties.token_decimals, str, ],
                                token_symbol: typing.Union[MetaOapg.properties.token_symbol, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'payment_token':
                                return super().__new__(
                                    cls,
                                    *args,
                                    token_logo=token_logo,
                                    token_name=token_name,
                                    token_address=token_address,
                                    token_decimals=token_decimals,
                                    token_symbol=token_symbol,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "transaction_hash": transaction_hash,
                            "block_timestamp": block_timestamp,
                            "buyer_address": buyer_address,
                            "seller_address": seller_address,
                            "price": price,
                            "price_formatted": price_formatted,
                            "usd_price_at_sale": usd_price_at_sale,
                            "current_usd_value": current_usd_value,
                            "token_id": token_id,
                            "payment_token": payment_token,
                        }
            
                
                price: MetaOapg.properties.price
                block_timestamp: MetaOapg.properties.block_timestamp
                payment_token: MetaOapg.properties.payment_token
                transaction_hash: MetaOapg.properties.transaction_hash
                price_formatted: MetaOapg.properties.price_formatted
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["transaction_hash"]) -> MetaOapg.properties.transaction_hash: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["block_timestamp"]) -> MetaOapg.properties.block_timestamp: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["buyer_address"]) -> MetaOapg.properties.buyer_address: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["seller_address"]) -> MetaOapg.properties.seller_address: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["price_formatted"]) -> MetaOapg.properties.price_formatted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["usd_price_at_sale"]) -> MetaOapg.properties.usd_price_at_sale: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["current_usd_value"]) -> MetaOapg.properties.current_usd_value: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["token_id"]) -> MetaOapg.properties.token_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["payment_token"]) -> MetaOapg.properties.payment_token: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["transaction_hash", "block_timestamp", "buyer_address", "seller_address", "price", "price_formatted", "usd_price_at_sale", "current_usd_value", "token_id", "payment_token", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["transaction_hash"]) -> MetaOapg.properties.transaction_hash: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["block_timestamp"]) -> MetaOapg.properties.block_timestamp: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["buyer_address"]) -> typing.Union[MetaOapg.properties.buyer_address, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["seller_address"]) -> typing.Union[MetaOapg.properties.seller_address, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["price_formatted"]) -> MetaOapg.properties.price_formatted: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["usd_price_at_sale"]) -> typing.Union[MetaOapg.properties.usd_price_at_sale, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["current_usd_value"]) -> typing.Union[MetaOapg.properties.current_usd_value, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["token_id"]) -> typing.Union[MetaOapg.properties.token_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["payment_token"]) -> MetaOapg.properties.payment_token: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transaction_hash", "block_timestamp", "buyer_address", "seller_address", "price", "price_formatted", "usd_price_at_sale", "current_usd_value", "token_id", "payment_token", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    buyer_address: typing.Union[MetaOapg.properties.buyer_address, str, schemas.Unset] = schemas.unset,
                    seller_address: typing.Union[MetaOapg.properties.seller_address, str, schemas.Unset] = schemas.unset,
                    usd_price_at_sale: typing.Union[MetaOapg.properties.usd_price_at_sale, str, schemas.Unset] = schemas.unset,
                    current_usd_value: typing.Union[MetaOapg.properties.current_usd_value, str, schemas.Unset] = schemas.unset,
                    token_id: typing.Union[MetaOapg.properties.token_id, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'highest_sale':
                    return super().__new__(
                        cls,
                        *args,
                        buyer_address=buyer_address,
                        seller_address=seller_address,
                        usd_price_at_sale=usd_price_at_sale,
                        current_usd_value=current_usd_value,
                        token_id=token_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class average_sale(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    required = {
                        "price",
                        "price_formatted",
                    }
                    
                    class properties:
                        price = schemas.StrSchema
                        price_formatted = schemas.StrSchema
                        current_usd_value = schemas.StrSchema
                        __annotations__ = {
                            "price": price,
                            "price_formatted": price_formatted,
                            "current_usd_value": current_usd_value,
                        }
            
                
                price: MetaOapg.properties.price
                price_formatted: MetaOapg.properties.price_formatted
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["price_formatted"]) -> MetaOapg.properties.price_formatted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["current_usd_value"]) -> MetaOapg.properties.current_usd_value: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["price", "price_formatted", "current_usd_value", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["price_formatted"]) -> MetaOapg.properties.price_formatted: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["current_usd_value"]) -> typing.Union[MetaOapg.properties.current_usd_value, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["price", "price_formatted", "current_usd_value", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    current_usd_value: typing.Union[MetaOapg.properties.current_usd_value, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'average_sale':
                    return super().__new__(
                        cls,
                        *args,
                        current_usd_value=current_usd_value,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class total_trades(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'total_trades':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            message = schemas.StrSchema
            __annotations__ = {
                "last_sale": last_sale,
                "lowest_sale": lowest_sale,
                "highest_sale": highest_sale,
                "average_sale": average_sale,
                "total_trades": total_trades,
                "message": message,
            }

    
    last_sale: MetaOapg.properties.last_sale
    average_sale: MetaOapg.properties.average_sale
    highest_sale: MetaOapg.properties.highest_sale
    lowest_sale: MetaOapg.properties.lowest_sale
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_sale"]) -> MetaOapg.properties.last_sale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lowest_sale"]) -> MetaOapg.properties.lowest_sale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["highest_sale"]) -> MetaOapg.properties.highest_sale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["average_sale"]) -> MetaOapg.properties.average_sale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_trades"]) -> MetaOapg.properties.total_trades: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["last_sale", "lowest_sale", "highest_sale", "average_sale", "total_trades", "message", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_sale"]) -> MetaOapg.properties.last_sale: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lowest_sale"]) -> MetaOapg.properties.lowest_sale: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["highest_sale"]) -> MetaOapg.properties.highest_sale: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["average_sale"]) -> MetaOapg.properties.average_sale: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_trades"]) -> typing.Union[MetaOapg.properties.total_trades, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["last_sale", "lowest_sale", "highest_sale", "average_sale", "total_trades", "message", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        last_sale: typing.Union[MetaOapg.properties.last_sale, dict, frozendict.frozendict, None, ],
        average_sale: typing.Union[MetaOapg.properties.average_sale, dict, frozendict.frozendict, None, ],
        highest_sale: typing.Union[MetaOapg.properties.highest_sale, dict, frozendict.frozendict, None, ],
        lowest_sale: typing.Union[MetaOapg.properties.lowest_sale, dict, frozendict.frozendict, None, ],
        total_trades: typing.Union[MetaOapg.properties.total_trades, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SoldPrice':
        return super().__new__(
            cls,
            *args,
            last_sale=last_sale,
            average_sale=average_sale,
            highest_sale=highest_sale,
            lowest_sale=lowest_sale,
            total_trades=total_trades,
            message=message,
            _configuration=_configuration,
            **kwargs,
        )
