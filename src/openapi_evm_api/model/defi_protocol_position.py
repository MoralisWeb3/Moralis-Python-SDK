# coding: utf-8

"""
    EVM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_evm_api import schemas  # noqa: F401


class DefiProtocolPosition(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "balance_usd",
            "tokens",
            "label",
            "total_unclaimed_usd_value",
        }
        
        class properties:
            label = schemas.StrSchema
            
            
            class tokens(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DefiTokenBalance']:
                        return DefiTokenBalance
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DefiTokenBalance'], typing.List['DefiTokenBalance']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tokens':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DefiTokenBalance':
                    return super().__getitem__(i)
            balance_usd = schemas.NumberSchema
            total_unclaimed_usd_value = schemas.NumberSchema
            address = schemas.StrSchema
            position_details = schemas.DictSchema
            __annotations__ = {
                "label": label,
                "tokens": tokens,
                "balance_usd": balance_usd,
                "total_unclaimed_usd_value": total_unclaimed_usd_value,
                "address": address,
                "position_details": position_details,
            }

    
    balance_usd: MetaOapg.properties.balance_usd
    tokens: MetaOapg.properties.tokens
    label: MetaOapg.properties.label
    total_unclaimed_usd_value: MetaOapg.properties.total_unclaimed_usd_value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokens"]) -> MetaOapg.properties.tokens: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance_usd"]) -> MetaOapg.properties.balance_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_unclaimed_usd_value"]) -> MetaOapg.properties.total_unclaimed_usd_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position_details"]) -> MetaOapg.properties.position_details: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["label", "tokens", "balance_usd", "total_unclaimed_usd_value", "address", "position_details", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokens"]) -> MetaOapg.properties.tokens: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance_usd"]) -> MetaOapg.properties.balance_usd: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_unclaimed_usd_value"]) -> MetaOapg.properties.total_unclaimed_usd_value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position_details"]) -> typing.Union[MetaOapg.properties.position_details, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label", "tokens", "balance_usd", "total_unclaimed_usd_value", "address", "position_details", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        balance_usd: typing.Union[MetaOapg.properties.balance_usd, decimal.Decimal, int, float, ],
        tokens: typing.Union[MetaOapg.properties.tokens, list, tuple, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        total_unclaimed_usd_value: typing.Union[MetaOapg.properties.total_unclaimed_usd_value, decimal.Decimal, int, float, ],
        address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
        position_details: typing.Union[MetaOapg.properties.position_details, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DefiProtocolPosition':
        return super().__new__(
            cls,
            *args,
            balance_usd=balance_usd,
            tokens=tokens,
            label=label,
            total_unclaimed_usd_value=total_unclaimed_usd_value,
            address=address,
            position_details=position_details,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_evm_api.model.defi_token_balance import DefiTokenBalance
