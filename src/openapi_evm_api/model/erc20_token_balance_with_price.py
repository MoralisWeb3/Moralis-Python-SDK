# coding: utf-8

"""
    EVM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_evm_api import schemas  # noqa: F401


class Erc20TokenBalanceWithPrice(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "symbol",
            "balance_formatted",
            "usd_price",
            "usd_price_24hr_percent_change",
            "usd_price_24hr_usd_change",
            "use_value_24hr_usd_change",
            "portfolio_percentage",
            "balance",
            "possible_spam",
            "decimals",
            "name",
            "native_token",
            "usd_value",
        }
        
        class properties:
            name = schemas.StrSchema
            symbol = schemas.StrSchema
            decimals = schemas.IntSchema
            balance = schemas.StrSchema
            possible_spam = schemas.BoolSchema
            usd_price = schemas.StrSchema
            usd_price_24hr_percent_change = schemas.StrSchema
            usd_price_24hr_usd_change = schemas.StrSchema
            usd_value = schemas.NumberSchema
            portfolio_percentage = schemas.NumberSchema
            balance_formatted = schemas.StrSchema
            native_token = schemas.BoolSchema
            token_address = schemas.StrSchema
            logo = schemas.StrSchema
            thumbnail = schemas.StrSchema
            verified_contract = schemas.BoolSchema
            usd_value_24hr_usd_change = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "symbol": symbol,
                "decimals": decimals,
                "balance": balance,
                "possible_spam": possible_spam,
                "usd_price": usd_price,
                "usd_price_24hr_percent_change": usd_price_24hr_percent_change,
                "usd_price_24hr_usd_change": usd_price_24hr_usd_change,
                "usd_value": usd_value,
                "portfolio_percentage": portfolio_percentage,
                "balance_formatted": balance_formatted,
                "native_token": native_token,
                "token_address": token_address,
                "logo": logo,
                "thumbnail": thumbnail,
                "verified_contract": verified_contract,
                "usd_value_24hr_usd_change": usd_value_24hr_usd_change,
            }
    
    symbol: MetaOapg.properties.symbol
    balance_formatted: MetaOapg.properties.balance_formatted
    usd_price: MetaOapg.properties.usd_price
    usd_price_24hr_percent_change: MetaOapg.properties.usd_price_24hr_percent_change
    usd_price_24hr_usd_change: MetaOapg.properties.usd_price_24hr_usd_change
    use_value_24hr_usd_change: schemas.AnyTypeSchema
    portfolio_percentage: MetaOapg.properties.portfolio_percentage
    balance: MetaOapg.properties.balance
    possible_spam: MetaOapg.properties.possible_spam
    decimals: MetaOapg.properties.decimals
    name: MetaOapg.properties.name
    native_token: MetaOapg.properties.native_token
    usd_value: MetaOapg.properties.usd_value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["decimals"]) -> MetaOapg.properties.decimals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["possible_spam"]) -> MetaOapg.properties.possible_spam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usd_price"]) -> MetaOapg.properties.usd_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usd_price_24hr_percent_change"]) -> MetaOapg.properties.usd_price_24hr_percent_change: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usd_price_24hr_usd_change"]) -> MetaOapg.properties.usd_price_24hr_usd_change: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usd_value"]) -> MetaOapg.properties.usd_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["portfolio_percentage"]) -> MetaOapg.properties.portfolio_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance_formatted"]) -> MetaOapg.properties.balance_formatted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["native_token"]) -> MetaOapg.properties.native_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token_address"]) -> MetaOapg.properties.token_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo"]) -> MetaOapg.properties.logo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumbnail"]) -> MetaOapg.properties.thumbnail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verified_contract"]) -> MetaOapg.properties.verified_contract: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usd_value_24hr_usd_change"]) -> MetaOapg.properties.usd_value_24hr_usd_change: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "symbol", "decimals", "balance", "possible_spam", "usd_price", "usd_price_24hr_percent_change", "usd_price_24hr_usd_change", "usd_value", "portfolio_percentage", "balance_formatted", "native_token", "token_address", "logo", "thumbnail", "verified_contract", "usd_value_24hr_usd_change", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["decimals"]) -> MetaOapg.properties.decimals: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["possible_spam"]) -> MetaOapg.properties.possible_spam: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usd_price"]) -> MetaOapg.properties.usd_price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usd_price_24hr_percent_change"]) -> MetaOapg.properties.usd_price_24hr_percent_change: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usd_price_24hr_usd_change"]) -> MetaOapg.properties.usd_price_24hr_usd_change: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usd_value"]) -> MetaOapg.properties.usd_value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["portfolio_percentage"]) -> MetaOapg.properties.portfolio_percentage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance_formatted"]) -> MetaOapg.properties.balance_formatted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["native_token"]) -> MetaOapg.properties.native_token: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token_address"]) -> typing.Union[MetaOapg.properties.token_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo"]) -> typing.Union[MetaOapg.properties.logo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumbnail"]) -> typing.Union[MetaOapg.properties.thumbnail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verified_contract"]) -> typing.Union[MetaOapg.properties.verified_contract, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usd_value_24hr_usd_change"]) -> typing.Union[MetaOapg.properties.usd_value_24hr_usd_change, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "symbol", "decimals", "balance", "possible_spam", "usd_price", "usd_price_24hr_percent_change", "usd_price_24hr_usd_change", "usd_value", "portfolio_percentage", "balance_formatted", "native_token", "token_address", "logo", "thumbnail", "verified_contract", "usd_value_24hr_usd_change", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        symbol: typing.Union[MetaOapg.properties.symbol, str, ],
        balance_formatted: typing.Union[MetaOapg.properties.balance_formatted, str, ],
        usd_price: typing.Union[MetaOapg.properties.usd_price, str, ],
        usd_price_24hr_percent_change: typing.Union[MetaOapg.properties.usd_price_24hr_percent_change, str, ],
        usd_price_24hr_usd_change: typing.Union[MetaOapg.properties.usd_price_24hr_usd_change, str, ],
        use_value_24hr_usd_change: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        portfolio_percentage: typing.Union[MetaOapg.properties.portfolio_percentage, decimal.Decimal, int, float, ],
        balance: typing.Union[MetaOapg.properties.balance, str, ],
        possible_spam: typing.Union[MetaOapg.properties.possible_spam, bool, ],
        decimals: typing.Union[MetaOapg.properties.decimals, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        native_token: typing.Union[MetaOapg.properties.native_token, bool, ],
        usd_value: typing.Union[MetaOapg.properties.usd_value, decimal.Decimal, int, float, ],
        token_address: typing.Union[MetaOapg.properties.token_address, str, schemas.Unset] = schemas.unset,
        logo: typing.Union[MetaOapg.properties.logo, str, schemas.Unset] = schemas.unset,
        thumbnail: typing.Union[MetaOapg.properties.thumbnail, str, schemas.Unset] = schemas.unset,
        verified_contract: typing.Union[MetaOapg.properties.verified_contract, bool, schemas.Unset] = schemas.unset,
        usd_value_24hr_usd_change: typing.Union[MetaOapg.properties.usd_value_24hr_usd_change, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Erc20TokenBalanceWithPrice':
        return super().__new__(
            cls,
            *args,
            symbol=symbol,
            balance_formatted=balance_formatted,
            usd_price=usd_price,
            usd_price_24hr_percent_change=usd_price_24hr_percent_change,
            usd_price_24hr_usd_change=usd_price_24hr_usd_change,
            use_value_24hr_usd_change=use_value_24hr_usd_change,
            portfolio_percentage=portfolio_percentage,
            balance=balance,
            possible_spam=possible_spam,
            decimals=decimals,
            name=name,
            native_token=native_token,
            usd_value=usd_value,
            token_address=token_address,
            logo=logo,
            thumbnail=thumbnail,
            verified_contract=verified_contract,
            usd_value_24hr_usd_change=usd_value_24hr_usd_change,
            _configuration=_configuration,
            **kwargs,
        )
