# coding: utf-8

"""
    EVM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_evm_api import schemas  # noqa: F401


class OhlcCandles(
    schemas.ListSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class items(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                required = {
                    "volume",
                    "high",
                    "low",
                    "trades",
                    "close",
                    "open",
                    "timestamp",
                }
                
                class properties:
                    timestamp = schemas.StrSchema
                    open = schemas.NumberSchema
                    high = schemas.NumberSchema
                    low = schemas.NumberSchema
                    close = schemas.NumberSchema
                    volume = schemas.NumberSchema
                    trades = schemas.NumberSchema
                    __annotations__ = {
                        "timestamp": timestamp,
                        "open": open,
                        "high": high,
                        "low": low,
                        "close": close,
                        "volume": volume,
                        "trades": trades,
                    }
        
            
            volume: MetaOapg.properties.volume
            high: MetaOapg.properties.high
            low: MetaOapg.properties.low
            trades: MetaOapg.properties.trades
            close: MetaOapg.properties.close
            open: MetaOapg.properties.open
            timestamp: MetaOapg.properties.timestamp
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["open"]) -> MetaOapg.properties.open: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["high"]) -> MetaOapg.properties.high: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["low"]) -> MetaOapg.properties.low: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["close"]) -> MetaOapg.properties.close: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["volume"]) -> MetaOapg.properties.volume: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["trades"]) -> MetaOapg.properties.trades: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["timestamp", "open", "high", "low", "close", "volume", "trades", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["open"]) -> MetaOapg.properties.open: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["high"]) -> MetaOapg.properties.high: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["low"]) -> MetaOapg.properties.low: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["close"]) -> MetaOapg.properties.close: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["volume"]) -> MetaOapg.properties.volume: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["trades"]) -> MetaOapg.properties.trades: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["timestamp", "open", "high", "low", "close", "volume", "trades", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                volume: typing.Union[MetaOapg.properties.volume, decimal.Decimal, int, float, ],
                high: typing.Union[MetaOapg.properties.high, decimal.Decimal, int, float, ],
                low: typing.Union[MetaOapg.properties.low, decimal.Decimal, int, float, ],
                trades: typing.Union[MetaOapg.properties.trades, decimal.Decimal, int, float, ],
                close: typing.Union[MetaOapg.properties.close, decimal.Decimal, int, float, ],
                open: typing.Union[MetaOapg.properties.open, decimal.Decimal, int, float, ],
                timestamp: typing.Union[MetaOapg.properties.timestamp, str, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    volume=volume,
                    high=high,
                    low=low,
                    trades=trades,
                    close=close,
                    open=open,
                    timestamp=timestamp,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'OhlcCandles':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
