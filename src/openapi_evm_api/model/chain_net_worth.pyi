# coding: utf-8

"""
    EVM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_evm_api import schemas  # noqa: F401


class ChainNetWorth(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "chain",
            "native_balance",
            "token_balance_usd",
            "native_balance_formatted",
            "native_balance_usd",
            "networth_usd",
        }
        
        class properties:
            chain = schemas.StrSchema
            native_balance = schemas.StrSchema
            native_balance_formatted = schemas.StrSchema
            native_balance_usd = schemas.StrSchema
            token_balance_usd = schemas.StrSchema
            networth_usd = schemas.StrSchema
            __annotations__ = {
                "chain": chain,
                "native_balance": native_balance,
                "native_balance_formatted": native_balance_formatted,
                "native_balance_usd": native_balance_usd,
                "token_balance_usd": token_balance_usd,
                "networth_usd": networth_usd,
            }

    
    chain: MetaOapg.properties.chain
    native_balance: MetaOapg.properties.native_balance
    token_balance_usd: MetaOapg.properties.token_balance_usd
    native_balance_formatted: MetaOapg.properties.native_balance_formatted
    native_balance_usd: MetaOapg.properties.native_balance_usd
    networth_usd: MetaOapg.properties.networth_usd
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chain"]) -> MetaOapg.properties.chain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["native_balance"]) -> MetaOapg.properties.native_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["native_balance_formatted"]) -> MetaOapg.properties.native_balance_formatted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["native_balance_usd"]) -> MetaOapg.properties.native_balance_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token_balance_usd"]) -> MetaOapg.properties.token_balance_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["networth_usd"]) -> MetaOapg.properties.networth_usd: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["chain", "native_balance", "native_balance_formatted", "native_balance_usd", "token_balance_usd", "networth_usd", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chain"]) -> MetaOapg.properties.chain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["native_balance"]) -> MetaOapg.properties.native_balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["native_balance_formatted"]) -> MetaOapg.properties.native_balance_formatted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["native_balance_usd"]) -> MetaOapg.properties.native_balance_usd: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token_balance_usd"]) -> MetaOapg.properties.token_balance_usd: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["networth_usd"]) -> MetaOapg.properties.networth_usd: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["chain", "native_balance", "native_balance_formatted", "native_balance_usd", "token_balance_usd", "networth_usd", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        chain: typing.Union[MetaOapg.properties.chain, str, ],
        native_balance: typing.Union[MetaOapg.properties.native_balance, str, ],
        token_balance_usd: typing.Union[MetaOapg.properties.token_balance_usd, str, ],
        native_balance_formatted: typing.Union[MetaOapg.properties.native_balance_formatted, str, ],
        native_balance_usd: typing.Union[MetaOapg.properties.native_balance_usd, str, ],
        networth_usd: typing.Union[MetaOapg.properties.networth_usd, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChainNetWorth':
        return super().__new__(
            cls,
            *args,
            chain=chain,
            native_balance=native_balance,
            token_balance_usd=token_balance_usd,
            native_balance_formatted=native_balance_formatted,
            native_balance_usd=native_balance_usd,
            networth_usd=networth_usd,
            _configuration=_configuration,
            **kwargs,
        )
