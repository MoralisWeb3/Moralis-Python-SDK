# coding: utf-8

"""
    EVM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_evm_api import schemas  # noqa: F401


class DefiPositionDetails(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class fee_tier(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fee_tier':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class range_tnd(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'range_tnd':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class reserves(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reserves':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class current_price(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'current_price':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class is_in_range(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_in_range':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class price_upper(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'price_upper':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class price_lower(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'price_lower':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class price_label(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'price_label':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class liquidity(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'liquidity':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class range_start(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'range_start':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class pool_address(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pool_address':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class position_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'position_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class nft_metadata(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
            
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'nft_metadata':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class asset_standard(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'asset_standard':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class apy(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apy':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class is_debt(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_debt':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class is_variable_debt(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_variable_debt':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class is_stable_debt(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_stable_debt':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class shares(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shares':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class reserve0(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reserve0':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class reserve1(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reserve1':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            factory = schemas.StrSchema
            
            
            class pair(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pair':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class share_of_pool(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'share_of_pool':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class no_price_available(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'no_price_available':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class shares_in_strategy(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shares_in_strategy':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class strategy_address(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'strategy_address':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "fee_tier": fee_tier,
                "range_tnd": range_tnd,
                "reserves": reserves,
                "current_price": current_price,
                "is_in_range": is_in_range,
                "price_upper": price_upper,
                "price_lower": price_lower,
                "price_label": price_label,
                "liquidity": liquidity,
                "range_start": range_start,
                "pool_address": pool_address,
                "position_key": position_key,
                "nft_metadata": nft_metadata,
                "asset_standard": asset_standard,
                "apy": apy,
                "is_debt": is_debt,
                "is_variable_debt": is_variable_debt,
                "is_stable_debt": is_stable_debt,
                "shares": shares,
                "reserve0": reserve0,
                "reserve1": reserve1,
                "factory": factory,
                "pair": pair,
                "share_of_pool": share_of_pool,
                "no_price_available": no_price_available,
                "shares_in_strategy": shares_in_strategy,
                "strategy_address": strategy_address,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fee_tier"]) -> MetaOapg.properties.fee_tier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["range_tnd"]) -> MetaOapg.properties.range_tnd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reserves"]) -> MetaOapg.properties.reserves: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_price"]) -> MetaOapg.properties.current_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_in_range"]) -> MetaOapg.properties.is_in_range: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_upper"]) -> MetaOapg.properties.price_upper: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_lower"]) -> MetaOapg.properties.price_lower: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_label"]) -> MetaOapg.properties.price_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liquidity"]) -> MetaOapg.properties.liquidity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["range_start"]) -> MetaOapg.properties.range_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pool_address"]) -> MetaOapg.properties.pool_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position_key"]) -> MetaOapg.properties.position_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nft_metadata"]) -> MetaOapg.properties.nft_metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asset_standard"]) -> MetaOapg.properties.asset_standard: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apy"]) -> MetaOapg.properties.apy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_debt"]) -> MetaOapg.properties.is_debt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_variable_debt"]) -> MetaOapg.properties.is_variable_debt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_stable_debt"]) -> MetaOapg.properties.is_stable_debt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shares"]) -> MetaOapg.properties.shares: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reserve0"]) -> MetaOapg.properties.reserve0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reserve1"]) -> MetaOapg.properties.reserve1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["factory"]) -> MetaOapg.properties.factory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pair"]) -> MetaOapg.properties.pair: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["share_of_pool"]) -> MetaOapg.properties.share_of_pool: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["no_price_available"]) -> MetaOapg.properties.no_price_available: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shares_in_strategy"]) -> MetaOapg.properties.shares_in_strategy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strategy_address"]) -> MetaOapg.properties.strategy_address: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fee_tier", "range_tnd", "reserves", "current_price", "is_in_range", "price_upper", "price_lower", "price_label", "liquidity", "range_start", "pool_address", "position_key", "nft_metadata", "asset_standard", "apy", "is_debt", "is_variable_debt", "is_stable_debt", "shares", "reserve0", "reserve1", "factory", "pair", "share_of_pool", "no_price_available", "shares_in_strategy", "strategy_address", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fee_tier"]) -> typing.Union[MetaOapg.properties.fee_tier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["range_tnd"]) -> typing.Union[MetaOapg.properties.range_tnd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reserves"]) -> typing.Union[MetaOapg.properties.reserves, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_price"]) -> typing.Union[MetaOapg.properties.current_price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_in_range"]) -> typing.Union[MetaOapg.properties.is_in_range, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_upper"]) -> typing.Union[MetaOapg.properties.price_upper, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_lower"]) -> typing.Union[MetaOapg.properties.price_lower, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_label"]) -> typing.Union[MetaOapg.properties.price_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liquidity"]) -> typing.Union[MetaOapg.properties.liquidity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["range_start"]) -> typing.Union[MetaOapg.properties.range_start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pool_address"]) -> typing.Union[MetaOapg.properties.pool_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position_key"]) -> typing.Union[MetaOapg.properties.position_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nft_metadata"]) -> typing.Union[MetaOapg.properties.nft_metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asset_standard"]) -> typing.Union[MetaOapg.properties.asset_standard, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apy"]) -> typing.Union[MetaOapg.properties.apy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_debt"]) -> typing.Union[MetaOapg.properties.is_debt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_variable_debt"]) -> typing.Union[MetaOapg.properties.is_variable_debt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_stable_debt"]) -> typing.Union[MetaOapg.properties.is_stable_debt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shares"]) -> typing.Union[MetaOapg.properties.shares, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reserve0"]) -> typing.Union[MetaOapg.properties.reserve0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reserve1"]) -> typing.Union[MetaOapg.properties.reserve1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["factory"]) -> typing.Union[MetaOapg.properties.factory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pair"]) -> typing.Union[MetaOapg.properties.pair, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["share_of_pool"]) -> typing.Union[MetaOapg.properties.share_of_pool, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["no_price_available"]) -> typing.Union[MetaOapg.properties.no_price_available, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shares_in_strategy"]) -> typing.Union[MetaOapg.properties.shares_in_strategy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strategy_address"]) -> typing.Union[MetaOapg.properties.strategy_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fee_tier", "range_tnd", "reserves", "current_price", "is_in_range", "price_upper", "price_lower", "price_label", "liquidity", "range_start", "pool_address", "position_key", "nft_metadata", "asset_standard", "apy", "is_debt", "is_variable_debt", "is_stable_debt", "shares", "reserve0", "reserve1", "factory", "pair", "share_of_pool", "no_price_available", "shares_in_strategy", "strategy_address", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        fee_tier: typing.Union[MetaOapg.properties.fee_tier, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        range_tnd: typing.Union[MetaOapg.properties.range_tnd, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        reserves: typing.Union[MetaOapg.properties.reserves, list, tuple, None, schemas.Unset] = schemas.unset,
        current_price: typing.Union[MetaOapg.properties.current_price, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        is_in_range: typing.Union[MetaOapg.properties.is_in_range, None, bool, schemas.Unset] = schemas.unset,
        price_upper: typing.Union[MetaOapg.properties.price_upper, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        price_lower: typing.Union[MetaOapg.properties.price_lower, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        price_label: typing.Union[MetaOapg.properties.price_label, None, str, schemas.Unset] = schemas.unset,
        liquidity: typing.Union[MetaOapg.properties.liquidity, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        range_start: typing.Union[MetaOapg.properties.range_start, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pool_address: typing.Union[MetaOapg.properties.pool_address, None, str, schemas.Unset] = schemas.unset,
        position_key: typing.Union[MetaOapg.properties.position_key, None, str, schemas.Unset] = schemas.unset,
        nft_metadata: typing.Union[MetaOapg.properties.nft_metadata, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        asset_standard: typing.Union[MetaOapg.properties.asset_standard, None, str, schemas.Unset] = schemas.unset,
        apy: typing.Union[MetaOapg.properties.apy, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        is_debt: typing.Union[MetaOapg.properties.is_debt, None, bool, schemas.Unset] = schemas.unset,
        is_variable_debt: typing.Union[MetaOapg.properties.is_variable_debt, None, bool, schemas.Unset] = schemas.unset,
        is_stable_debt: typing.Union[MetaOapg.properties.is_stable_debt, None, bool, schemas.Unset] = schemas.unset,
        shares: typing.Union[MetaOapg.properties.shares, None, str, schemas.Unset] = schemas.unset,
        reserve0: typing.Union[MetaOapg.properties.reserve0, None, str, schemas.Unset] = schemas.unset,
        reserve1: typing.Union[MetaOapg.properties.reserve1, None, str, schemas.Unset] = schemas.unset,
        factory: typing.Union[MetaOapg.properties.factory, str, schemas.Unset] = schemas.unset,
        pair: typing.Union[MetaOapg.properties.pair, None, str, schemas.Unset] = schemas.unset,
        share_of_pool: typing.Union[MetaOapg.properties.share_of_pool, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        no_price_available: typing.Union[MetaOapg.properties.no_price_available, None, bool, schemas.Unset] = schemas.unset,
        shares_in_strategy: typing.Union[MetaOapg.properties.shares_in_strategy, None, str, schemas.Unset] = schemas.unset,
        strategy_address: typing.Union[MetaOapg.properties.strategy_address, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DefiPositionDetails':
        return super().__new__(
            cls,
            *args,
            fee_tier=fee_tier,
            range_tnd=range_tnd,
            reserves=reserves,
            current_price=current_price,
            is_in_range=is_in_range,
            price_upper=price_upper,
            price_lower=price_lower,
            price_label=price_label,
            liquidity=liquidity,
            range_start=range_start,
            pool_address=pool_address,
            position_key=position_key,
            nft_metadata=nft_metadata,
            asset_standard=asset_standard,
            apy=apy,
            is_debt=is_debt,
            is_variable_debt=is_variable_debt,
            is_stable_debt=is_stable_debt,
            shares=shares,
            reserve0=reserve0,
            reserve1=reserve1,
            factory=factory,
            pair=pair,
            share_of_pool=share_of_pool,
            no_price_available=no_price_available,
            shares_in_strategy=shares_in_strategy,
            strategy_address=strategy_address,
            _configuration=_configuration,
            **kwargs,
        )
