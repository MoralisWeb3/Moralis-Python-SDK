# coding: utf-8

"""
    EVM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_evm_api import schemas  # noqa: F401


class WalletActiveChain(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "chain",
            "chain_id",
        }
        
        class properties:
            chain = schemas.StrSchema
            chain_id = schemas.StrSchema
        
            @staticmethod
            def first_transaction() -> typing.Type['TransactionTimestamp']:
                return TransactionTimestamp
        
            @staticmethod
            def last_transaction() -> typing.Type['TransactionTimestamp']:
                return TransactionTimestamp
            __annotations__ = {
                "chain": chain,
                "chain_id": chain_id,
                "first_transaction": first_transaction,
                "last_transaction": last_transaction,
            }

    
    chain: MetaOapg.properties.chain
    chain_id: MetaOapg.properties.chain_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chain"]) -> MetaOapg.properties.chain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chain_id"]) -> MetaOapg.properties.chain_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_transaction"]) -> 'TransactionTimestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_transaction"]) -> 'TransactionTimestamp': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["chain", "chain_id", "first_transaction", "last_transaction", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chain"]) -> MetaOapg.properties.chain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chain_id"]) -> MetaOapg.properties.chain_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_transaction"]) -> typing.Union['TransactionTimestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_transaction"]) -> typing.Union['TransactionTimestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["chain", "chain_id", "first_transaction", "last_transaction", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        chain: typing.Union[MetaOapg.properties.chain, str, ],
        chain_id: typing.Union[MetaOapg.properties.chain_id, str, ],
        first_transaction: typing.Union['TransactionTimestamp', schemas.Unset] = schemas.unset,
        last_transaction: typing.Union['TransactionTimestamp', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WalletActiveChain':
        return super().__new__(
            cls,
            *args,
            chain=chain,
            chain_id=chain_id,
            first_transaction=first_transaction,
            last_transaction=last_transaction,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_evm_api.model.transaction_timestamp import TransactionTimestamp
