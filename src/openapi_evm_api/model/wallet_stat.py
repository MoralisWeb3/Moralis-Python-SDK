# coding: utf-8

"""
    EVM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_evm_api import schemas  # noqa: F401


class WalletStat(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "nft_transfers",
            "nfts",
            "collections",
            "token_transfers",
            "transactions",
        }
        
        class properties:
            nfts = schemas.StrSchema
            collections = schemas.StrSchema
            
            
            class transactions(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "total",
                    }
                    
                    class properties:
                        total = schemas.StrSchema
                        __annotations__ = {
                            "total": total,
                        }
                
                total: MetaOapg.properties.total
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["total", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    total: typing.Union[MetaOapg.properties.total, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'transactions':
                    return super().__new__(
                        cls,
                        *args,
                        total=total,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class nft_transfers(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "total",
                    }
                    
                    class properties:
                        total = schemas.StrSchema
                        __annotations__ = {
                            "total": total,
                        }
                
                total: MetaOapg.properties.total
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["total", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    total: typing.Union[MetaOapg.properties.total, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'nft_transfers':
                    return super().__new__(
                        cls,
                        *args,
                        total=total,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class token_transfers(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "total",
                    }
                    
                    class properties:
                        total = schemas.StrSchema
                        __annotations__ = {
                            "total": total,
                        }
                
                total: MetaOapg.properties.total
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["total", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    total: typing.Union[MetaOapg.properties.total, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'token_transfers':
                    return super().__new__(
                        cls,
                        *args,
                        total=total,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "nfts": nfts,
                "collections": collections,
                "transactions": transactions,
                "nft_transfers": nft_transfers,
                "token_transfers": token_transfers,
            }

    
    nft_transfers: MetaOapg.properties.nft_transfers
    nfts: MetaOapg.properties.nfts
    collections: MetaOapg.properties.collections
    token_transfers: MetaOapg.properties.token_transfers
    transactions: MetaOapg.properties.transactions
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nfts"]) -> MetaOapg.properties.nfts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collections"]) -> MetaOapg.properties.collections: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nft_transfers"]) -> MetaOapg.properties.nft_transfers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token_transfers"]) -> MetaOapg.properties.token_transfers: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["nfts", "collections", "transactions", "nft_transfers", "token_transfers", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nfts"]) -> MetaOapg.properties.nfts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collections"]) -> MetaOapg.properties.collections: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nft_transfers"]) -> MetaOapg.properties.nft_transfers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token_transfers"]) -> MetaOapg.properties.token_transfers: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["nfts", "collections", "transactions", "nft_transfers", "token_transfers", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        nft_transfers: typing.Union[MetaOapg.properties.nft_transfers, dict, frozendict.frozendict, ],
        nfts: typing.Union[MetaOapg.properties.nfts, str, ],
        collections: typing.Union[MetaOapg.properties.collections, str, ],
        token_transfers: typing.Union[MetaOapg.properties.token_transfers, dict, frozendict.frozendict, ],
        transactions: typing.Union[MetaOapg.properties.transactions, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WalletStat':
        return super().__new__(
            cls,
            *args,
            nft_transfers=nft_transfers,
            nfts=nfts,
            collections=collections,
            token_transfers=token_transfers,
            transactions=transactions,
            _configuration=_configuration,
            **kwargs,
        )
