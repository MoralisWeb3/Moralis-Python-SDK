# coding: utf-8

"""
    EVM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_evm_api import schemas  # noqa: F401


class OhlcResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "pair_label",
            "candles",
            "exchange",
            "interval",
            "quote_currency",
            "pair_address",
        }
        
        class properties:
            pair_address = schemas.StrSchema
            pair_label = schemas.StrSchema
            exchange = schemas.StrSchema
            quote_currency = schemas.StrSchema
            interval = schemas.StrSchema
        
            @staticmethod
            def candles() -> typing.Type['OhlcCandles']:
                return OhlcCandles
            __annotations__ = {
                "pair_address": pair_address,
                "pair_label": pair_label,
                "exchange": exchange,
                "quote_currency": quote_currency,
                "interval": interval,
                "candles": candles,
            }
    
    pair_label: MetaOapg.properties.pair_label
    candles: 'OhlcCandles'
    exchange: MetaOapg.properties.exchange
    interval: MetaOapg.properties.interval
    quote_currency: MetaOapg.properties.quote_currency
    pair_address: MetaOapg.properties.pair_address
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pair_address"]) -> MetaOapg.properties.pair_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pair_label"]) -> MetaOapg.properties.pair_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchange"]) -> MetaOapg.properties.exchange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quote_currency"]) -> MetaOapg.properties.quote_currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interval"]) -> MetaOapg.properties.interval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["candles"]) -> 'OhlcCandles': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pair_address", "pair_label", "exchange", "quote_currency", "interval", "candles", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pair_address"]) -> MetaOapg.properties.pair_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pair_label"]) -> MetaOapg.properties.pair_label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchange"]) -> MetaOapg.properties.exchange: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quote_currency"]) -> MetaOapg.properties.quote_currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interval"]) -> MetaOapg.properties.interval: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["candles"]) -> 'OhlcCandles': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pair_address", "pair_label", "exchange", "quote_currency", "interval", "candles", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        pair_label: typing.Union[MetaOapg.properties.pair_label, str, ],
        candles: 'OhlcCandles',
        exchange: typing.Union[MetaOapg.properties.exchange, str, ],
        interval: typing.Union[MetaOapg.properties.interval, str, ],
        quote_currency: typing.Union[MetaOapg.properties.quote_currency, str, ],
        pair_address: typing.Union[MetaOapg.properties.pair_address, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OhlcResult':
        return super().__new__(
            cls,
            *args,
            pair_label=pair_label,
            candles=candles,
            exchange=exchange,
            interval=interval,
            quote_currency=quote_currency,
            pair_address=pair_address,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_evm_api.model.ohlc_candles import OhlcCandles
