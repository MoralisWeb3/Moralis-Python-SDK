# coding: utf-8

"""
    EVM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_evm_api import schemas  # noqa: F401


class ResolveContractInteractionResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class approvals(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CommonContractData']:
                        return CommonContractData
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approvals':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class revokes(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CommonContractData']:
                        return CommonContractData
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'revokes':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class approvalsAll(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CommonContractData']:
                        return CommonContractData
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approvalsAll':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class revokesAll(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CommonContractData']:
                        return CommonContractData
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'revokesAll':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "approvals": approvals,
                "revokes": revokes,
                "approvalsAll": approvalsAll,
                "revokesAll": revokesAll,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvals"]) -> MetaOapg.properties.approvals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["revokes"]) -> MetaOapg.properties.revokes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalsAll"]) -> MetaOapg.properties.approvalsAll: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["revokesAll"]) -> MetaOapg.properties.revokesAll: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["approvals", "revokes", "approvalsAll", "revokesAll", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvals"]) -> typing.Union[MetaOapg.properties.approvals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["revokes"]) -> typing.Union[MetaOapg.properties.revokes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalsAll"]) -> typing.Union[MetaOapg.properties.approvalsAll, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["revokesAll"]) -> typing.Union[MetaOapg.properties.revokesAll, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["approvals", "revokes", "approvalsAll", "revokesAll", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        approvals: typing.Union[MetaOapg.properties.approvals, list, tuple, None, schemas.Unset] = schemas.unset,
        revokes: typing.Union[MetaOapg.properties.revokes, list, tuple, None, schemas.Unset] = schemas.unset,
        approvalsAll: typing.Union[MetaOapg.properties.approvalsAll, list, tuple, None, schemas.Unset] = schemas.unset,
        revokesAll: typing.Union[MetaOapg.properties.revokesAll, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ResolveContractInteractionResponse':
        return super().__new__(
            cls,
            *args,
            approvals=approvals,
            revokes=revokes,
            approvalsAll=approvalsAll,
            revokesAll=revokesAll,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_evm_api.model.common_contract_data import CommonContractData
