# coding: utf-8

"""
    EVM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_evm_api import schemas  # noqa: F401


class Trait(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "percentage",
            "count",
            "trait_value",
            "rarity_label",
            "trait_type",
        }
        
        class properties:
            trait_type = schemas.StrSchema
            trait_value = schemas.StrSchema
            count = schemas.NumberSchema
            percentage = schemas.NumberSchema
            rarity_label = schemas.StrSchema
            __annotations__ = {
                "trait_type": trait_type,
                "trait_value": trait_value,
                "count": count,
                "percentage": percentage,
                "rarity_label": rarity_label,
            }

    
    percentage: MetaOapg.properties.percentage
    count: MetaOapg.properties.count
    trait_value: MetaOapg.properties.trait_value
    rarity_label: MetaOapg.properties.rarity_label
    trait_type: MetaOapg.properties.trait_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trait_type"]) -> MetaOapg.properties.trait_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trait_value"]) -> MetaOapg.properties.trait_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["percentage"]) -> MetaOapg.properties.percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rarity_label"]) -> MetaOapg.properties.rarity_label: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["trait_type", "trait_value", "count", "percentage", "rarity_label", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trait_type"]) -> MetaOapg.properties.trait_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trait_value"]) -> MetaOapg.properties.trait_value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["percentage"]) -> MetaOapg.properties.percentage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rarity_label"]) -> MetaOapg.properties.rarity_label: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["trait_type", "trait_value", "count", "percentage", "rarity_label", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        percentage: typing.Union[MetaOapg.properties.percentage, decimal.Decimal, int, float, ],
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, float, ],
        trait_value: typing.Union[MetaOapg.properties.trait_value, str, ],
        rarity_label: typing.Union[MetaOapg.properties.rarity_label, str, ],
        trait_type: typing.Union[MetaOapg.properties.trait_type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Trait':
        return super().__new__(
            cls,
            *args,
            percentage=percentage,
            count=count,
            trait_value=trait_value,
            rarity_label=rarity_label,
            trait_type=trait_type,
            _configuration=_configuration,
            **kwargs,
        )
