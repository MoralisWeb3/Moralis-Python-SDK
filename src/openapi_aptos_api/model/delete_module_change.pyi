# coding: utf-8

"""
    aptos-api

    The aptos-api provider  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_aptos_api import schemas  # noqa: F401


class DeleteModuleChange(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "address",
            "state_key_hash",
            "module",
            "type",
        }
        
        class properties:
            type = schemas.StrSchema
            address = schemas.DictSchema
            state_key_hash = schemas.StrSchema
            module = schemas.DictSchema
            __annotations__ = {
                "type": type,
                "address": address,
                "state_key_hash": state_key_hash,
                "module": module,
            }
    
    address: MetaOapg.properties.address
    state_key_hash: MetaOapg.properties.state_key_hash
    module: MetaOapg.properties.module
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_key_hash"]) -> MetaOapg.properties.state_key_hash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["module"]) -> MetaOapg.properties.module: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "address", "state_key_hash", "module", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_key_hash"]) -> MetaOapg.properties.state_key_hash: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["module"]) -> MetaOapg.properties.module: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "address", "state_key_hash", "module", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        address: typing.Union[MetaOapg.properties.address, dict, frozendict.frozendict, ],
        state_key_hash: typing.Union[MetaOapg.properties.state_key_hash, str, ],
        module: typing.Union[MetaOapg.properties.module, dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeleteModuleChange':
        return super().__new__(
            cls,
            *args,
            address=address,
            state_key_hash=state_key_hash,
            module=module,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )
